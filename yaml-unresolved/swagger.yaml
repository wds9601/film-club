openapi: 3.0.0
info:
  title: Film Club
  version: 1.0.0
  description: API for the the Film Club site for tracking movies.
  contact:
    name: Repository
    url: 'https://github.com/wds9601/film-club'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/moloprojects/film-club/1.0.0
  - url: 'http://localhost:8080/v1'
tags:
  - name: echo
    description: Useful for healthchecks and testing connections.
  - name: film
    description: Info about a film
paths:
  /echo/hello/{name}:
    get:
      tags:
        - echo
      summary: Echo a name
      description: Returns a greeting using the supplied name
      operationId: echoName
      parameters:
        - name: name
          in: path
          description: Any name
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
              examples:
                Bob:
                  value: 'Hello, Bob!'
  /echo/int/{n}:
    get:
      tags:
        - echo
      summary: Echo an integer
      description: |
        Selects the given number from the database, returns json. Useful for
        testing the database connection and json responses.
      operationId: echoNumber
      parameters: 
        - name: n
          in: path
          description: Any whole number
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  selected:
                    type: integer
                    format: int32
              examples:
                forty-two:
                  value:
                    {
                      "selected": 42
                    }
  /echo/person:
    post:
      tags:
        - echo
      summary: Echo a person type
      description: Echoes back the same JSON payload if it's considered valid
      operationId: echoPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EchoPerson'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EchoPerson'
        400:
          description: invalid json payload
          content:
            text/plain:
              schema:
                type: string
              example: 'No good'

  /films/upcoming:
    get:
      tags:
        - film
      summary: Get upcoming films
      description: Get paginated list of upcoming films
      operationId: getUpcoming
      parameters: 
        - name: page
          in: query
          description: The next page of contents to request
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: List of upcoming films with pagination info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpcomingFilmsResponse'
  
  /films/images/{imageType}/{imagePath}:
    get:
      tags:
        - film
      summary: Get image for a film
      description: Retrieve image data related to a film
      operationId: getFilmImage
      parameters:
        - name: imageType
          in: path
          description: |
            The image type to retrieve
          required: true
          schema:
            type: string
            enum: [poster, backdrop]
        - name: imagePath
          in: path
          description: |
            The path for the image to retrieve (e.g. poster or backdrop)
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: |
            The relative dimensions of the image to retrieve. This will depend 
            on the `imageType`. For example, a 'small' _poster_ will request an 
            image with a width of 154 pixels. A 'small' _backdrop_ will request 
            an image with a width of 300 pixels. 
            |  Size  |  Poster  | Backdrop |
            |:------:|:--------:|:--------:|
            |  small |    154   |    300   |
            | medium |    342   |    780   |
            |  large |    780   |   1280   |
            |  full  | original | original |
          schema:
            type: string
            enum: [small, medium, large, full]
            default: small
      responses:
        200:
          description: The data for the requested image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

components:
  schemas:
    EchoPerson:
      type: object
      required: 
        - name
        - age
      properties:
        name:
          type: string
        age:
          type: integer
          minimum: 1
      example:
        {
          "name": "Jon Snow",
          "age": 35
        }
    UpcomingFilmsResponse:
      type: object
      required: 
        - films
        - page
        - totalPages
        - totalResults
      properties:
        films:
          type: array
          items:
            $ref: '#/components/schemas/Film'
        page:
          type: integer
          minimum: 1
        totalPages:
          type: integer
        totalResults:
          type: integer
    Film:
      type: object
      required:
        - genres
        - id
        - originalLanguage
        - originalTitle
        - overview
        - popularity
        - releaseDate
        - title
        - voteAverage
        - voteCount
      properties:
        backdropPath:
          type: string
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        id:
          type: integer
          format: int64
        originalLanguage:
          type: string
        originalTitle:
          type: string
        overview:
          type: string
        popularity:
          type: number
          format: double
        releaseDate:
          type: string
          format: date-time
        title:
          type: string
        voteAverage:
          type: number
          format: double
        voteCount:
          type: number
          format: double
      example:
        {
          "backdropPath": "/srYya1ZlI97Au4jUYAktDe3avyA.jpg",
          "genres": [
            {
              "id": 14,
              "name": "Fantasy"
            },
            {
              "id": 28,
              "name": "Action"
            },
            {
              "id": 12,
              "name": "Adventure"
            }
          ],
          "id": 464052,
          "originalLanguage": "en",
          "originalTitle": "Wonder Woman 1984",
          "overview": "Wonder Woman comes into conflict with the Soviet Union during the Cold War in the 1980s and finds a formidable foe by the name of the Cheetah.",
          "popularity": 974.114,
          "posterPath": "/di1bCAfGoJ0BzNEavLsPyxQ2AaB.jpg",
          "releaseDate": "2020-12-25",
          "title": "Wonder Woman 1984",
          "voteAverage": 7.1,
          "voteCount": 111
        }
    Genre:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string